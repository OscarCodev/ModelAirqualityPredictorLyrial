"""
API REST con FastAPI para predicci√≥n de calidad del aire
Expone endpoints para obtener predicciones y datos meteorol√≥gicos
"""

from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime, date
import uvicorn

from weather_api import WeatherAPI
from train_model import AirQualityModel
from predict import AirQualityPredictor
import config


# Modelos Pydantic para respuestas
class WeatherData(BaseModel):
    """Modelo para datos meteorol√≥gicos"""
    temperature_celsius: float = Field(..., description="Temperatura en ¬∞C")
    temperature_kelvin: float = Field(..., description="Temperatura en K")
    dewpoint_celsius: float = Field(..., description="Punto de roc√≠o en ¬∞C")
    dewpoint_kelvin: float = Field(..., description="Punto de roc√≠o en K")
    pressure_hpa: float = Field(..., description="Presi√≥n en hPa")
    pressure_pa: float = Field(..., description="Presi√≥n en Pa")
    wind_u: float = Field(..., description="Componente U del viento (m/s)")
    wind_v: float = Field(..., description="Componente V del viento (m/s)")
    wind_speed: float = Field(..., description="Velocidad del viento (m/s)")
    precipitation_mm: float = Field(..., description="Precipitaci√≥n en mm/h")
    timestamp: str = Field(..., description="Timestamp de los datos")


class ForecastDay(BaseModel):
    """Modelo para un d√≠a de pron√≥stico"""
    date: str = Field(..., description="Fecha del pron√≥stico")
    temperature_celsius: float = Field(..., description="Temperatura promedio en ¬∞C")
    dewpoint_celsius: float = Field(..., description="Punto de roc√≠o promedio en ¬∞C")
    pressure_hpa: float = Field(..., description="Presi√≥n promedio en hPa")
    wind_speed: float = Field(..., description="Velocidad del viento promedio (m/s)")
    precipitation_mm: float = Field(..., description="Precipitaci√≥n promedio en mm/h")


class AirPollution(BaseModel):
    """Modelo para datos de contaminaci√≥n del aire"""
    NO2: float = Field(..., description="Di√≥xido de nitr√≥geno (¬µg/m¬≥)")
    CO: float = Field(..., description="Mon√≥xido de carbono (mg/m¬≥)")
    O3: float = Field(..., description="Ozono (¬µg/m¬≥)")
    SO2: float = Field(..., description="Di√≥xido de azufre (¬µg/m¬≥)")
    pm2_5: float = Field(..., description="PM2.5 (¬µg/m¬≥)")
    pm10: float = Field(..., description="PM10 (¬µg/m¬≥)")


class PredictionResult(BaseModel):
    """Modelo para resultado de predicci√≥n"""
    date: str = Field(..., description="Fecha de la predicci√≥n")
    NO2_ugm3: float = Field(..., description="NO‚ÇÇ predicho (¬µg/m¬≥)")
    CO_mgm3: float = Field(..., description="CO predicho (mg/m¬≥)")
    O3_ugm3: float = Field(..., description="O‚ÇÉ predicho (¬µg/m¬≥)")
    SO2_ugm3: float = Field(..., description="SO‚ÇÇ predicho (¬µg/m¬≥)")
    aerosol_index: float = Field(..., description="√çndice de aerosoles predicho")
    AQI: float = Field(..., description="√çndice de Calidad del Aire")
    quality: str = Field(..., description="Clasificaci√≥n de calidad del aire")


class HealthInfo(BaseModel):
    """Informaci√≥n de salud seg√∫n AQI"""
    aqi: float
    classification: str
    color: str
    health_implications: str
    cautionary_statement: str


class ApiInfo(BaseModel):
    """Informaci√≥n de la API"""
    name: str
    version: str
    description: str
    location: Dict[str, Any]
    endpoints: List[str]


# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title="API de Predicci√≥n de Calidad del Aire - Huamanga",
    description="API REST para predecir la calidad del aire en Huamanga, Ayacucho, Per√∫ usando Machine Learning y datos de OpenWeatherMap",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Instancias globales
weather_api = WeatherAPI()
predictor = AirQualityPredictor()

# Cargar modelos al inicio
@app.on_event("startup")
async def startup_event():
    """Cargar modelos al iniciar la API"""
    print("üöÄ Iniciando API de Calidad del Aire...")
    print("üì¶ Cargando modelos de Machine Learning...")
    success = predictor.model.load_models()
    if success:
        print("‚úÖ Modelos cargados exitosamente")
    else:
        print("‚ö†Ô∏è Advertencia: No se pudieron cargar todos los modelos")
    print("üåê API lista en http://localhost:8000")
    print("üìö Documentaci√≥n en http://localhost:8000/docs")


# ==================== ENDPOINTS ====================

@app.get("/", response_model=ApiInfo, tags=["General"])
async def root():
    """
    Endpoint ra√≠z - Informaci√≥n de la API
    """
    return {
        "name": "Air Quality Prediction API",
        "version": "1.0.0",
        "description": "API para predecir la calidad del aire en Huamanga, Ayacucho, Per√∫",
        "location": {
            "city": "Huamanga",
            "department": "Ayacucho",
            "country": "Per√∫",
            "latitude": config.LATITUDE,
            "longitude": config.LONGITUDE
        },
        "endpoints": [
            "/",
            "/health",
            "/weather/current",
            "/weather/forecast",
            "/weather/pollution",
            "/predict",
            "/predict/today",
            "/aqi/info"
        ]
    }


@app.get("/health", tags=["General"])
async def health_check():
    """
    Health check - Verificar estado de la API
    """
    models_loaded = len(predictor.model.models) > 0
    return {
        "status": "healthy" if models_loaded else "degraded",
        "timestamp": datetime.now().isoformat(),
        "models_loaded": len(predictor.model.models),
        "api_connected": True
    }


@app.get("/weather/current", response_model=WeatherData, tags=["OpenWeatherMap"])
async def get_current_weather():
    """
    Obtener datos meteorol√≥gicos actuales de OpenWeatherMap
    
    Retorna temperatura, presi√≥n, viento, precipitaci√≥n, etc.
    """
    try:
        data = weather_api.get_current_weather()
        if not data:
            raise HTTPException(status_code=503, detail="No se pudieron obtener datos meteorol√≥gicos")
        
        import math
        wind_speed = math.sqrt(data['wind_u']**2 + data['wind_v']**2)
        
        return {
            "temperature_celsius": data['temperature'] - 273.15,
            "temperature_kelvin": data['temperature'],
            "dewpoint_celsius": data['dewpoint'] - 273.15,
            "dewpoint_kelvin": data['dewpoint'],
            "pressure_hpa": data['pressure'] / 100,
            "pressure_pa": data['pressure'],
            "wind_u": data['wind_u'],
            "wind_v": data['wind_v'],
            "wind_speed": wind_speed,
            "precipitation_mm": data['precipitation'] * 1000,
            "timestamp": data['timestamp'].isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener datos meteorol√≥gicos: {str(e)}")


@app.get("/weather/forecast", response_model=List[ForecastDay], tags=["OpenWeatherMap"])
async def get_weather_forecast(
    days: int = Query(default=7, ge=1, le=7, description="N√∫mero de d√≠as de pron√≥stico (1-7)")
):
    """
    Obtener pron√≥stico meteorol√≥gico para los pr√≥ximos d√≠as
    
    - **days**: N√∫mero de d√≠as de pron√≥stico (1-7)
    """
    try:
        forecast = weather_api.get_forecast(days)
        if not forecast:
            raise HTTPException(status_code=503, detail="No se pudo obtener el pron√≥stico")
        
        import math
        result = []
        for day in forecast:
            wind_speed = math.sqrt(day['wind_u']**2 + day['wind_v']**2)
            result.append({
                "date": str(day['date']),
                "temperature_celsius": day['temperature'] - 273.15,
                "dewpoint_celsius": day['dewpoint'] - 273.15,
                "pressure_hpa": day['pressure'] / 100,
                "wind_speed": wind_speed,
                "precipitation_mm": day['precipitation'] * 1000
            })
        
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener pron√≥stico: {str(e)}")


@app.get("/weather/pollution", response_model=AirPollution, tags=["OpenWeatherMap"])
async def get_air_pollution():
    """
    Obtener datos actuales de contaminaci√≥n del aire de OpenWeatherMap
    
    Retorna niveles de NO‚ÇÇ, CO, O‚ÇÉ, SO‚ÇÇ, PM2.5 y PM10
    """
    try:
        pollution = weather_api.get_air_pollution()
        if not pollution:
            raise HTTPException(status_code=503, detail="No se pudieron obtener datos de contaminaci√≥n")
        
        return {
            "NO2": pollution['NO2'] * 1e6,  # Convertir a ¬µg/m¬≥
            "CO": pollution['CO'] * 1e3,     # Convertir a mg/m¬≥
            "O3": pollution['O3'] * 1e6,     # Convertir a ¬µg/m¬≥
            "SO2": pollution['SO2'] * 1e6,   # Convertir a ¬µg/m¬≥
            "pm2_5": pollution['pm2_5'],
            "pm10": pollution['pm10']
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener datos de contaminaci√≥n: {str(e)}")


@app.get("/predict", response_model=List[PredictionResult], tags=["Predicci√≥n"])
async def predict_air_quality(
    days: int = Query(default=7, ge=1, le=7, description="N√∫mero de d√≠as a predecir (1-7)")
):
    """
    Predecir la calidad del aire para los pr√≥ximos d√≠as
    
    Utiliza modelos de Machine Learning entrenados con datos hist√≥ricos
    y pron√≥sticos meteorol√≥gicos de OpenWeatherMap.
    
    - **days**: N√∫mero de d√≠as a predecir incluyendo hoy (1-7)
    
    Retorna predicciones de contaminantes y AQI para cada d√≠a.
    """
    try:
        # Hacer predicci√≥n
        predictions = predictor.predict_current_and_forecast(days)
        
        if predictions is None:
            raise HTTPException(
                status_code=503,
                detail="No se pudieron generar predicciones. Verifica que los modelos est√©n entrenados."
            )
        
        # Agregar AQI
        predictions_with_aqi = predictor.get_air_quality_index(predictions)
        
        # Formatear respuesta
        result = []
        for _, row in predictions_with_aqi.iterrows():
            result.append({
                "date": str(row['date']) if 'date' in row else datetime.now().date().isoformat(),
                "NO2_ugm3": row['NO2'] * 1e6 if 'NO2' in row else 0,
                "CO_mgm3": row['CO'] * 1e3 if 'CO' in row else 0,
                "O3_ugm3": row['O3'] * 1e6 if 'O3' in row else 0,
                "SO2_ugm3": row['SO2'] * 1e6 if 'SO2' in row else 0,
                "aerosol_index": row['aerosol_index'] if 'aerosol_index' in row else 0,
                "AQI": row['AQI'] if 'AQI' in row else 0,
                "quality": row['Calidad'] if 'Calidad' in row else "N/A"
            })
        
        return result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al generar predicciones: {str(e)}")


@app.get("/predict/today", response_model=PredictionResult, tags=["Predicci√≥n"])
async def predict_today():
    """
    Predecir la calidad del aire solo para el d√≠a de hoy
    
    Retorna predicci√≥n de contaminantes y AQI para hoy.
    """
    try:
        predictions = predictor.predict_current_and_forecast(1)
        
        if predictions is None or predictions.empty:
            raise HTTPException(
                status_code=503,
                detail="No se pudo generar predicci√≥n para hoy"
            )
        
        predictions_with_aqi = predictor.get_air_quality_index(predictions)
        row = predictions_with_aqi.iloc[0]
        
        return {
            "date": str(row['date']) if 'date' in row else datetime.now().date().isoformat(),
            "NO2_ugm3": row['NO2'] * 1e6 if 'NO2' in row else 0,
            "CO_mgm3": row['CO'] * 1e3 if 'CO' in row else 0,
            "O3_ugm3": row['O3'] * 1e6 if 'O3' in row else 0,
            "SO2_ugm3": row['SO2'] * 1e6 if 'SO2' in row else 0,
            "aerosol_index": row['aerosol_index'] if 'aerosol_index' in row else 0,
            "AQI": row['AQI'] if 'AQI' in row else 0,
            "quality": row['Calidad'] if 'Calidad' in row else "N/A"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al generar predicci√≥n: {str(e)}")


@app.get("/aqi/info", response_model=Dict[str, Any], tags=["Informaci√≥n"])
async def get_aqi_info(
    aqi: float = Query(..., ge=0, le=500, description="Valor del AQI (0-500)")
):
    """
    Obtener informaci√≥n de salud seg√∫n el valor del AQI
    
    - **aqi**: Valor del √çndice de Calidad del Aire (0-500)
    
    Retorna clasificaci√≥n, color, implicaciones de salud y recomendaciones.
    """
    if aqi <= 50:
        classification = "Buena"
        color = "Verde"
        emoji = "üü¢"
        health = "La calidad del aire es satisfactoria y la contaminaci√≥n del aire presenta poco o ning√∫n riesgo."
        caution = "Ninguna precauci√≥n necesaria. Disfrute de actividades al aire libre."
    elif aqi <= 100:
        classification = "Moderada"
        color = "Amarillo"
        emoji = "üü°"
        health = "La calidad del aire es aceptable. Sin embargo, puede haber un riesgo moderado para un n√∫mero peque√±o de personas."
        caution = "Las personas excepcionalmente sensibles deben considerar limitar los esfuerzos prolongados al aire libre."
    elif aqi <= 150:
        classification = "Da√±ina para grupos sensibles"
        color = "Naranja"
        emoji = "üü†"
        health = "Los miembros de grupos sensibles pueden experimentar efectos en la salud. El p√∫blico en general probablemente no se ver√° afectado."
        caution = "Los ni√±os, ancianos y personas con enfermedades respiratorias deben limitar los esfuerzos prolongados al aire libre."
    elif aqi <= 200:
        classification = "Da√±ina"
        color = "Rojo"
        emoji = "üî¥"
        health = "Todos pueden comenzar a experimentar efectos en la salud. Los miembros de grupos sensibles pueden experimentar efectos m√°s graves."
        caution = "Todos deben evitar los esfuerzos prolongados al aire libre. Los grupos sensibles deben permanecer en interiores."
    elif aqi <= 300:
        classification = "Muy da√±ina"
        color = "P√∫rpura"
        emoji = "üü£"
        health = "Advertencia de salud: todos pueden experimentar efectos m√°s graves en la salud."
        caution = "Todos deben evitar todos los esfuerzos f√≠sicos al aire libre. Los grupos sensibles deben permanecer en interiores."
    else:
        classification = "Peligrosa"
        color = "Marr√≥n"
        emoji = "üî¥"
        health = "Alerta de salud: todos pueden experimentar efectos graves en la salud."
        caution = "Todos deben permanecer en interiores y mantener los niveles de actividad bajos."
    
    return {
        "aqi": aqi,
        "classification": classification,
        "color": color,
        "emoji": emoji,
        "health_implications": health,
        "cautionary_statement": caution,
        "ranges": {
            "Buena": "0-50",
            "Moderada": "51-100",
            "Da√±ina para grupos sensibles": "101-150",
            "Da√±ina": "151-200",
            "Muy da√±ina": "201-300",
            "Peligrosa": "301-500"
        }
    }


@app.get("/pollutants/info", tags=["Informaci√≥n"])
async def get_pollutants_info():
    """
    Informaci√≥n sobre los contaminantes predichos
    
    Retorna descripciones, fuentes y l√≠mites de cada contaminante.
    """
    return {
        "pollutants": [
            {
                "symbol": "NO‚ÇÇ",
                "name": "Di√≥xido de Nitr√≥geno",
                "unit": "¬µg/m¬≥",
                "description": "Gas reactivo que se forma principalmente por la combusti√≥n en motores de veh√≠culos.",
                "sources": ["Veh√≠culos", "Centrales el√©ctricas", "Industrias"],
                "health_effects": "Puede irritar las v√≠as respiratorias y agravar enfermedades respiratorias.",
                "who_limit": 40  # ¬µg/m¬≥ promedio anual
            },
            {
                "symbol": "CO",
                "name": "Mon√≥xido de Carbono",
                "unit": "mg/m¬≥",
                "description": "Gas t√≥xico e incoloro producido por la combusti√≥n incompleta de combustibles.",
                "sources": ["Veh√≠culos", "Calefacci√≥n", "Industrias"],
                "health_effects": "Reduce el suministro de ox√≠geno al cuerpo, afecta el sistema cardiovascular.",
                "who_limit": 10  # mg/m¬≥ 8 horas
            },
            {
                "symbol": "O‚ÇÉ",
                "name": "Ozono",
                "unit": "¬µg/m¬≥",
                "description": "Contaminante secundario formado por reacciones qu√≠micas entre NOx y COV bajo luz solar.",
                "sources": ["Reacciones fotoqu√≠micas", "No emitido directamente"],
                "health_effects": "Irrita las v√≠as respiratorias, reduce la funci√≥n pulmonar.",
                "who_limit": 100  # ¬µg/m¬≥ 8 horas
            },
            {
                "symbol": "SO‚ÇÇ",
                "name": "Di√≥xido de Azufre",
                "unit": "¬µg/m¬≥",
                "description": "Gas producido principalmente por la combusti√≥n de combustibles f√≥siles con azufre.",
                "sources": ["Centrales el√©ctricas", "Industrias", "Refiner√≠a"],
                "health_effects": "Puede causar problemas respiratorios, especialmente en asm√°ticos.",
                "who_limit": 20  # ¬µg/m¬≥ 24 horas
            },
            {
                "symbol": "AI",
                "name": "√çndice de Aerosoles",
                "unit": "Adimensional",
                "description": "Medida de part√≠culas suspendidas en la atm√≥sfera que absorben luz UV.",
                "sources": ["Polvo", "Humo", "Contaminaci√≥n industrial"],
                "health_effects": "Part√≠culas pueden penetrar en los pulmones y afectar la salud respiratoria.",
                "who_limit": None
            }
        ]
    }


# Ejecutar la API
if __name__ == "__main__":
    print("=" * 80)
    print("üåç API DE PREDICCI√ìN DE CALIDAD DEL AIRE - HUAMANGA")
    print("=" * 80)
    print(f"\nüìç Ubicaci√≥n: Huamanga, Ayacucho, Per√∫")
    print(f"üìê Coordenadas: {config.LATITUDE}, {config.LONGITUDE}")
    print(f"\nüöÄ Iniciando servidor...")
    print(f"üåê URL: http://localhost:8000")
    print(f"üìö Documentaci√≥n: http://localhost:8000/docs")
    print(f"üìñ ReDoc: http://localhost:8000/redoc")
    print(f"\n‚è∏Ô∏è  Presiona CTRL+C para detener\n")
    
    uvicorn.run(
        "api:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
